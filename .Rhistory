# If all nodes are bad, return NULL
if (length(endpoints) == length(bad_nodes)){
print("All nodes are removed during the process")
return(NULL)
}
print(paste("After trimming: ", length(get_endpoints(level3))))
# Stop adding list if we are at the last level
if (i != length(arranged_list)){
level4 <- incoming_list(arranged_list[[i]])
print(paste("New list: ", length(level4)))
level3 <- replace_end_nodes(level3, level4)
print(paste("level3 + level4: ", length(get_endpoints(level3))))
}
# Summarize results for this level
print(paste("How far are we: ", i))
end_time <- Sys.time()
print(paste("Time" , end_time - start_time))
print("--------------------------")
}
Heterodimer_tm <- -5
###
top <- 7
print("Tree search")
# Keep only certain amount of candidates
df[[4]] <- extract_top_n(df[[4]], top)
df[[5]] <- extract_top_n(df[[5]], top)
# This is a bug. I have not yet to figure out how to grwow
# multiple tree. So I just take whatever left and dispose
# The other flanking direactions
df <- df %>%
group_by(snpID) %>%
slice(1)
df
# Prepare the general list of multiplexing
list_3 <- list()
for (i in 1:length(df[[1]])){
list_3 <- c(list_3,
list(unlist(df[[4]][[i]])),
list(unlist(df[[5]][[i]])))
}
# Arrange the list from small to big
arranged_list <- list_3[order(sapply(list_3, length),
decreasing = FALSE)]
# Prepare the initial list for multiplexing
level2 <- list()
level3 <- list()
level4 <- list()
level2 <- incoming_list(arranged_list[[1]])
level3 <- replace_end_nodes(incoming_list(arranged_list[[1]]),
incoming_list(arranged_list[[2]])
)
level3 <- replace_end_nodes(level3,
incoming_list(arranged_list[[3]])
)
str(level3)
arranged_list
# Running
for (i in 4:length(arranged_list)){
# Start a timer
start_time <- Sys.time()
# Get all the end points from the tree
endpoints <- get_endpoints(level3)
# Endpoints come back a little messy
endpoints <- clean_endpoints(endpoints)
print(paste("Start with ", length(endpoints)))
# Evalauate all the ned points to its parents
bad_nodes <- compute_bad_nodes(endpoints, Heterodimer_tm)
print(paste("We are removing: ", length(bad_nodes)))
# Remove bad nodes if there are any
if (length(bad_nodes) != 0){
level3 <- Iterate_remove(level3,bad_nodes)
level3 <- remove_empty_lists(level3)
}
# If all nodes are bad, return NULL
if (length(endpoints) == length(bad_nodes)){
print("All nodes are removed during the process")
return(NULL)
}
print(paste("After trimming: ", length(get_endpoints(level3))))
# Stop adding list if we are at the last level
if (i != length(arranged_list)){
level4 <- incoming_list(arranged_list[[i]])
print(paste("New list: ", length(level4)))
level3 <- replace_end_nodes(level3, level4)
print(paste("level3 + level4: ", length(get_endpoints(level3))))
}
# Summarize results for this level
print(paste("How far are we: ", i))
print(paste("Time" , round(Sys.time() - start_time, 1)))
print("--------------------------")
}
level3
str(level3)
level[[1]]
level3[[1]]
names(level3[[1]])
names(level3[[1]][[1]])
names(level3[[1]][[1]][[1]])
names(level3[[1]][[1]][[1]][[1]])
names(level3[[1]][[1]][[1]][[1]][[1]])
names(level3[[1]][[1]][[1]][[1]][[1]][[1]])
names(level3[[1]][[1]][[1]][[1]][[1]][[1]][[1]])
names(level3[[1]])
names(level3)
names(level3[[1]])
names(level3[[1]][[1]])
names(level3[[1]][[1]][[1]])
names(level3[[1]][[1]][[1]][[1]])
names(level3[[1]][[1]][[1]][[1]][[1]])
names(level3[[1]][[1]][[1]][[1]][[1]][[1]])
endpoints <- get_endpoints(level3)
endpoints
# Endpoints come back a little messy
endpoints <- clean_endpoints(endpoints)
endpoints
unlist(endpoints)
endpoints
endpoints[[1]]
endpoints[[2]]
endpoints[[1]]
###
top <- 6
print("Tree search")
# Keep only certain amount of candidates
df[[4]] <- extract_top_n(df[[4]], top)
df[[5]] <- extract_top_n(df[[5]], top)
# This is a bug. I have not yet to figure out how to grwow
# multiple tree. So I just take whatever left and dispose
# The other flanking direactions
df <- df %>%
group_by(snpID) %>%
slice(1)
df
# Prepare the general list of multiplexing
list_3 <- list()
for (i in 1:length(df[[1]])){
list_3 <- c(list_3,
list(unlist(df[[4]][[i]])),
list(unlist(df[[5]][[i]])))
}
# Arrange the list from small to big
arranged_list <- list_3[order(sapply(list_3, length),
decreasing = FALSE)]
# Prepare the initial list for multiplexing
level2 <- list()
level3 <- list()
level4 <- list()
level2 <- incoming_list(arranged_list[[1]])
level3 <- replace_end_nodes(incoming_list(arranged_list[[1]]),
incoming_list(arranged_list[[2]])
)
level3 <- replace_end_nodes(level3,
incoming_list(arranged_list[[3]])
)
str(level3)
arranged_list
# Running
for (i in 4:length(arranged_list)){
# Start a timer
start_time <- Sys.time()
# Get all the end points from the tree
endpoints <- get_endpoints(level3)
# Endpoints come back a little messy
endpoints <- clean_endpoints(endpoints)
print(paste("Start with ", length(endpoints)))
# Evalauate all the ned points to its parents
bad_nodes <- compute_bad_nodes(endpoints, Heterodimer_tm)
print(paste("We are removing: ", length(bad_nodes)))
# Remove bad nodes if there are any
if (length(bad_nodes) != 0){
level3 <- Iterate_remove(level3,bad_nodes)
level3 <- remove_empty_lists(level3)
}
# If all nodes are bad, return NULL
if (length(endpoints) == length(bad_nodes)){
print("All nodes are removed during the process")
return(NULL)
}
print(paste("After trimming: ", length(get_endpoints(level3))))
# Stop adding list if we are at the last level
if (1){
level4 <- incoming_list(arranged_list[[i]])
print(paste("New list: ", length(level4)))
level3 <- replace_end_nodes(level3, level4)
print(paste("level3 + level4: ", length(get_endpoints(level3))))
}
# Summarize results for this level
print(paste("How far are we: ", i))
print(paste("Time" , round(Sys.time() - start_time, 1)))
print("--------------------------")
}
###
top <- 7
### I have a long long string. I want to get the left 18~25 charactors and
# between 300 ~ 800 units away, I want another 18 ~ 25
df <- all_text_warngling(snp_wrangled,
start_distance,
end_distance,
center,
far,
shift)
df
print("R get filter activated")
df <- stage1_filter(df, desired_tm, diff, Homodimer)
df
print("df2")
# Count how many candidates there are for each candidates
df <- df %>%
mutate(substrings_count = lengths(substrings),
faraway_count = lengths(faraway)) %>%
relocate(snpID, substrings_count, faraway_count, everything())
# Display the updated nested tibble
df
###
top <- 7
print("Tree search")
# Keep only certain amount of candidates
df[[4]] <- extract_top_n(df[[4]], top)
df[[5]] <- extract_top_n(df[[5]], top)
# This is a bug. I have not yet to figure out how to grwow
# multiple tree. So I just take whatever left and dispose
# The other flanking direactions
df <- df %>%
group_by(snpID) %>%
slice(1)
df
# Prepare the general list of multiplexing
list_3 <- list()
for (i in 1:length(df[[1]])){
list_3 <- c(list_3,
list(unlist(df[[4]][[i]])),
list(unlist(df[[5]][[i]])))
}
# Arrange the list from small to big
arranged_list <- list_3[order(sapply(list_3, length),
decreasing = FALSE)]
# Prepare the initial list for multiplexing
level2 <- list()
level3 <- list()
level4 <- list()
level2 <- incoming_list(arranged_list[[1]])
level3 <- replace_end_nodes(incoming_list(arranged_list[[1]]),
incoming_list(arranged_list[[2]])
)
level3 <- replace_end_nodes(level3,
incoming_list(arranged_list[[3]])
)
str(level3)
arranged_list
# Running
for (i in 4:length(arranged_list)){
# Start a timer
start_time <- Sys.time()
# Get all the end points from the tree
endpoints <- get_endpoints(level3)
# Endpoints come back a little messy
endpoints <- clean_endpoints(endpoints)
print(paste("Start with ", length(endpoints)))
# Evalauate all the ned points to its parents
bad_nodes <- compute_bad_nodes(endpoints, Heterodimer_tm)
print(paste("We are removing: ", length(bad_nodes)))
# Remove bad nodes if there are any
if (length(bad_nodes) != 0){
level3 <- Iterate_remove(level3,bad_nodes)
level3 <- remove_empty_lists(level3)
}
# If all nodes are bad, return NULL
if (length(endpoints) == length(bad_nodes)){
print("All nodes are removed during the process")
return(NULL)
}
print(paste("After trimming: ", length(get_endpoints(level3))))
# Stop adding list if we are at the last level
if (1){
level4 <- incoming_list(arranged_list[[i]])
print(paste("New list: ", length(level4)))
level3 <- replace_end_nodes(level3, level4)
print(paste("level3 + level4: ", length(get_endpoints(level3))))
}
# Summarize results for this level
print(paste("How far are we: ", i))
print(paste("Time" , round(Sys.time() - start_time, 1)))
print("--------------------------")
}
level3
k <- do.call(rbind, level3)
k[1:10, ]
k
View(k)
endpoints <- get_endpoints(level3)
# Endpoints come back a little messy
endpoints <- clean_endpoints(endpoints)
k <- do.call(endpoints, level3)
endpoints
endpoints[[1]]
unlist()
unlist(endpoints[[1]])
output <- list()
for (i in 1:10){
output <- c(output, unlist(endpoints[[i]]))
}
output
data.frame(output)
View(data.frame(output))
output <- list()
for (i in 1:10){
output <- c(output, list(unlist(endpoints[[i]])))
}
output
data.frame(output)
View(data.frame(output))
paste0("Option ", seq(1, 10))
endpoints <- get_endpoints(level3)
# Endpoints come back a little messy
endpoints <- clean_endpoints(endpoints)
df <- list()
for (i in 1:10){
df <- c(df, list(unlist(endpoints[[i]])))
}
df <- data.frame(df)
View(data.frame(output))
colnames(df) <- paste0("Option ", seq(1, 10))
View(df)
list_3
# This handle what part of the tree we want to show
get_display_tree(level3, keep){
endpoints <- get_endpoints(level3)
# Endpoints come back a little messy
endpoints <- clean_endpoints(endpoints)
display_tree <- list()
for (i in 1:keep){
display_tree <- c(display_tree, list(unlist(endpoints[[i]])))
}
display_tree <- data.frame(display_tree)
colnames(display_tree) <- paste0("Option ", seq(1, keep))
return(display_tree)
}
# This handle what part of the tree we want to show
get_display_tree <- function(level3, keep){
endpoints <- get_endpoints(level3)
# Endpoints come back a little messy
endpoints <- clean_endpoints(endpoints)
display_tree <- list()
for (i in 1:keep){
display_tree <- c(display_tree, list(unlist(endpoints[[i]])))
}
display_tree <- data.frame(display_tree)
colnames(display_tree) <- paste0("Option ", seq(1, keep))
return(display_tree)
}
View(get_display_tree(level, 5))
View(get_display_tree(level3, 5))
setwd("~/GitHub/Research-primer/Multiplexing App")
library(DT)
library(dplyr)
library(tidyverse)
library(stringi)
library(stringr)
library(mosaic)
library(dplyr)
library(purrr)
#graphing
library(ggplot2)
library(hexbin)
library(patchwork)
library(plotly)
# Bioinformatics
library(biomaRt)
library(spgs)
library(primer3)
# Deployment
library(shinydashboard)
library(shiny)
source("functions.R")
options(repos = BiocManager::repositories())
primer = "rs17025867, rs9939609, rs7903146, rs1121980, rs76141775"
shift = 600
desired_tm = 60
diff = 2
Homodimer_tm = 0
Heterodimer_tm = -5
center <- 800
far <- 200
start_distance <- 15
end_distance <- 30
# Accessing database
print("Execute MART API")
snp_list <- strsplit(primer, " ")[[1]]
upStream <- center
downStream <- center
snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
snp_sequence <- getBM(attributes = c('refsnp_id', 'snp'),
filters = c('snp_filter', 'upstream_flank', 'downstream_flank'),
checkFilters = FALSE,
values = list(snp_list, upStream, downStream),
mart = snpmart,
bmHeader = TRUE)
#Create a new data frame
snp_wrangled <- data.frame(matrix(ncol = 2, nrow = 0))
# Add each variation as a new string into each row
for (j in snp_sequence$`Variant name`){
for (i in list_seq(snp_sequence$`Variant sequences`[snp_sequence$`Variant name`==j])){
snp_wrangled[nrow(snp_wrangled) + 1,] <- c(j, i)
}
}
# Rename columns and data frame
colnames(snp_wrangled) = c("snpID", "sequence")
variantsTrimmed <- snp_wrangled
variantsTrimmed_ghost <- snp_wrangled
### I have a long long string. I want to get the left 18~25 charactors and
# between 300 ~ 800 units away, I want another 18 ~ 25
df <- all_text_warngling(snp_wrangled,
start_distance,
end_distance,
center,
far,
shift)
df
print("R get filter activated")
df <- stage1_filter(df, desired_tm, diff, Homodimer)
df
print("df2")
# Count how many candidates there are for each candidates
df <- df %>%
mutate(substrings_count = lengths(substrings),
faraway_count = lengths(faraway)) %>%
relocate(snpID, substrings_count, faraway_count, everything())
# Display the updated nested tibble
df
###
top <- 7
print("Tree search")
# Keep only certain amount of candidates
df[[4]] <- extract_top_n(df[[4]], top)
df[[5]] <- extract_top_n(df[[5]], top)
# This is a bug. I have not yet to figure out how to grwow
# multiple tree. So I just take whatever left and dispose
# The other flanking direactions
df <- df %>%
group_by(snpID) %>%
slice(1)
df
# Prepare the general list of multiplexing
list_3 <- list()
names(df)
names(df[[1]])
names(df[1])
df[1]
df[[1]]
# Prepare the general list of multiplexing
list_3 <- list()
for (i in 1:length(df[[1]])){
list_3 <- c(list_3,
list(unlist(df[[4]][[i]])),
list(unlist(df[[5]][[i]])))
}
# Arrange the list from small to big
arranged_list <- list_3
# Prepare the initial list for multiplexing
level2 <- list()
level3 <- list()
level4 <- list()
level2 <- incoming_list(arranged_list[[1]])
level3 <- replace_end_nodes(incoming_list(arranged_list[[1]]),
incoming_list(arranged_list[[2]])
)
level3 <- replace_end_nodes(level3,
incoming_list(arranged_list[[3]])
)
str(level3)
arranged_list
# Running
for (i in 4:length(arranged_list)){
# Start a timer
start_time <- Sys.time()
# Get all the end points from the tree
endpoints <- get_endpoints(level3)
# Endpoints come back a little messy
endpoints <- clean_endpoints(endpoints)
print(paste("Start with ", length(endpoints)))
# Evalauate all the ned points to its parents
bad_nodes <- compute_bad_nodes(endpoints, Heterodimer_tm)
print(paste("We are removing: ", length(bad_nodes)))
# Remove bad nodes if there are any
if (length(bad_nodes) != 0){
level3 <- Iterate_remove(level3,bad_nodes)
level3 <- remove_empty_lists(level3)
}
# If all nodes are bad, return NULL
if (length(endpoints) == length(bad_nodes)){
print("All nodes are removed during the process")
return(NULL)
}
print(paste("After trimming: ", length(get_endpoints(level3))))
# Stop adding list if we are at the last level
if (1){
level4 <- incoming_list(arranged_list[[i]])
print(paste("New list: ", length(level4)))
level3 <- replace_end_nodes(level3, level4)
print(paste("level3 + level4: ", length(get_endpoints(level3))))
}
# Summarize results for this level
print(paste("How far are we: ", i))
print(paste("Time" , round(Sys.time() - start_time, 1)))
print("--------------------------")
}
# This handle what part of the tree we want to show
level5 <- get_display_tree(level3, 3)
View(level5)
runApp()
runApp()
runApp()
