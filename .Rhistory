snp_sequence <- getBM(attributes = c('refsnp_id', 'snp'),
filters = c('snp_filter', 'upstream_flank', 'downstream_flank'),
checkFilters = FALSE,
values = c('rs25', 20, 20),
mart = snpmart,
bmHeader = TRUE)
library(dtplyr)
library(dbplyr)
snp_sequence <- getBM(attributes = c('refsnp_id', 'snp'),
filters = c('snp_filter', 'upstream_flank', 'downstream_flank'),
checkFilters = FALSE,
values = c('rs25', 20, 20),
mart = snpmart,
bmHeader = TRUE)
detach("package:dplyr", unload = TRUE)
detach("package:dbplyr", unload = TRUE)
detach("package:dtplyr", unload = TRUE)
library(dplyr)
getBM(attributes = c('refsnp_id', 'snp'),
filters = c('snp_filter', 'upstream_flank', 'downstream_flank'),
checkFilters = FALSE,
values = c('rs25', 20, 20),
mart = snpmart,
bmHeader = TRUE)
devtools::install_version("dbplyr", version = "2.3.4")
snp_sequence <- getBM(attributes = c('refsnp_id', 'snp'),
filters = c('snp_filter', 'upstream_flank', 'downstream_flank'),
checkFilters = FALSE,
values = c('rs25', 20, 20),
mart = snpmart,
bmHeader = TRUE)
# Accessing database
print("Execute MART API")
snp_list <- strsplit(primer, " ")[[1]]
upStream <- center
downStream <- center
snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
snp_sequence <- getBM(attributes = c('refsnp_id', 'snp'),
filters = c('snp_filter', 'upstream_flank', 'downstream_flank'),
checkFilters = FALSE,
values = c(snp_list, 20, 20),
mart = snpmart,
bmHeader = TRUE)
snp_sequence <- getBM(attributes = c('refsnp_id', 'snp'),
filters = c('snp_filter', 'upstream_flank', 'downstream_flank'),
checkFilters = FALSE,
values = list(snp_list, 20, 20),
mart = snpmart,
bmHeader = TRUE)
View(snp_sequence)
length(snp_sequence[[1]][[1]])
length(snp_sequence[[1]])
length(snp_sequence[[1]][[1]])
snp_sequence[[1]]
snp_sequence[[1]][[1]]
snp_sequence[[1]][1]
snp_sequence[[2]]
upStream <- center
downStream <- center
snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
snp_sequence <- getBM(attributes = c('refsnp_id', 'snp'),
filters = c('snp_filter', 'upstream_flank', 'downstream_flank'),
checkFilters = FALSE,
values = list(snp_list, upStream, downStream),
mart = snpmart,
bmHeader = TRUE)
snp_sequence[[2]]
snp_sequence[[2]][[1]]
lenght(snp_sequence[[2]][[1]])
length(snp_sequence[[2]][[1]])
length(snp_sequence[[2]][1])
length(snp_sequence[[2]][[1]][[1]])
snp_sequence[[2]]
snp_sequence[[2]][[2]]
#Create a new data frame
snp_wrangled <- data.frame(matrix(ncol = 2, nrow = 0))
# Add each variation as a new string into each row
for (j in snp_sequence$`Variant name`){
for (i in list_seq(snp_sequence$`Variant sequences`[snp_sequence$`Variant name`==j])){
snp_wrangled[nrow(snp_wrangled) + 1,] <- c(j, i)
}
}
# Rename columns and data frame
colnames(snp_wrangled) = c("snpID", "sequence")
### I have a long long string. I want to get the left 18~25 charactors and
# between 300 ~ 800 units away, I want another 18 ~ 25
df <- all_text_warngling(snp_wrangled,
start_distance,
end_distance,
center,
far,
shift)
library(dplyr)
#Create a new data frame
snp_wrangled <- data.frame(matrix(ncol = 2, nrow = 0))
# Add each variation as a new string into each row
for (j in snp_sequence$`Variant name`){
for (i in list_seq(snp_sequence$`Variant sequences`[snp_sequence$`Variant name`==j])){
snp_wrangled[nrow(snp_wrangled) + 1,] <- c(j, i)
}
}
library(DT)
library(dplyr)
library(tidyverse)
library(stringi)
library(stringr)
library(mosaic)
library(purrr)
#graphing
library(ggplot2)
library(hexbin)
library(patchwork)
library(plotly)
# Bioinformatics
library(biomaRt)
library(spgs)
library(primer3)
# Deployment
library(shinydashboard)
library(shiny)
# Add each variation as a new string into each row
for (j in snp_sequence$`Variant name`){
for (i in list_seq(snp_sequence$`Variant sequences`[snp_sequence$`Variant name`==j])){
snp_wrangled[nrow(snp_wrangled) + 1,] <- c(j, i)
}
}
# Rename columns and data frame
colnames(snp_wrangled) = c("snpID", "sequence")
View(snp_wrangled)
snp_wrangled[[2]][[4]]
grouped_sequences <- snp_wrangled %>%
group_by(snpID) %>%
summarize(sequence_list = list(sequence)) %>%
mutate(substrings = map(sequence_list, ~extract_substrings(.x,
center,
start_distance,
end_distance))) %>%
unnest(substrings)
View(grouped_sequences)
View(grouped_sequences[[3]][[1]])
grouped_sequences[[2]]
grouped_sequences[[2]]
grouped_sequences <- snp_wrangled %>%
group_by(snpID) %>%
summarize(sequence_list = list(sequence))
grouped_sequences[[2]]
grouped_sequences[[1]]
grouped_sequences[[2]]
grouped_sequences <- snp_wrangled %>%
group_by(snpID) %>%
summarize(sequence_list = list(sequence)) %>%
mutate(substrings = map(sequence_list, ~extract_substrings(.x,
center,
start_distance,
end_distance))) %>%
unnest(substrings)
View(grouped_sequences[[3]][[1]])
grouped_sequences[[2]]
View(grouped_sequences[[3]][[1]])
grouped_sequences[[3]][[1]]
# Empty lists to store substrings
substrings_left <- list()
substrings_right <- list()
for (item in string) {
# right flanking
for (distance in start_distance:end_distance) {
sub <- substr(item, center+1, center+1 + distance)
substrings_right <- c(substrings_right,
toupper(reverseComplement(get_strong1(sub,1))),
toupper(reverseComplement(get_strong2(sub,1))),
toupper(reverseComplement(get_medium1(sub,1))),
toupper(reverseComplement(get_weak1(sub,1))))
}
# Left flanking
for (distance in start_distance:end_distance) {
# print(substr(string, center -distance, center))
sub <- substr(item, center - distance, center +1)
substrings_left <- c(substrings_left,
get_strong1(sub,0),
get_strong2(sub,0),
get_medium1(sub,0),
get_weak1(sub,0))
}
start_distance = start_distance + 1
end_distance = end_distance + 1
}
View(grouped_sequences[[3]][[3]])
grouped_sequences[[3]][[3]]
View(grouped_sequences[[3]][[4]])
grouped_sequences[[3]][[4]]
grouped_sequences_far <- snp_wrangled %>%
group_by(snpID) %>%
slice(1:1)%>%
ungroup() %>%
mutate(substrings = map(sequence,
~extract_substrings_far(.x,
center,
start_distance,
end_distance,
far,
shift))) %>% unnest(substrings)
View(grouped_sequences_far)
View(grouped_sequences_far[[3]][[1]])
grouped_sequences_far[[3]][[1]]
View(grouped_sequences_far[[3]][[3]])
grouped_sequences_far[[3]][[3]]
setwd("~/GitHub/Research-primer/Multiplexing App")
# devtools::install_version("dbplyr", version = "2.3.4")
# Data processing
library(DT)
library(dplyr)
library(tidyverse)
library(stringi)
library(stringr)
library(mosaic)
library(purrr)
#graphing
library(ggplot2)
library(hexbin)
library(patchwork)
library(plotly)
# Bioinformatics
library(biomaRt)
library(spgs)
library(primer3)
# Deployment
library(shinydashboard)
library(shiny)
source("functions.R")
options(repos = BiocManager::repositories())
primer = "rs9939609, rs1121980"
shift = 100
desired_tm = 60
diff = 5
Heterodimer_tm = 50
Homodimer <- 45
top <- 2
# We will start exploring options 800 bp away from the SNP location upstream and downstream
center <- 800
hairpin <- 45
# from that distance of 800, we will search the range from 600 to 1,000. (800+200 and 800-200)
far <- 200
start_distance <- 15
end_distance <- 30
# Accessing database
print("Execute MART API")
snp_list <- strsplit(primer, " ")[[1]]
upStream <- center
downStream <- center
snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
snp_sequence <- getBM(attributes = c('refsnp_id', 'snp'),
filters = c('snp_filter', 'upstream_flank', 'downstream_flank'),
checkFilters = FALSE,
values = list(snp_list, upStream, downStream),
mart = snpmart,
bmHeader = TRUE)
#Create a new data frame
snp_wrangled <- data.frame(matrix(ncol = 2, nrow = 0))
# Add each variation as a new string into each row
for (j in snp_sequence$`Variant name`){
for (i in list_seq(snp_sequence$`Variant sequences`[snp_sequence$`Variant name`==j])){
snp_wrangled[nrow(snp_wrangled) + 1,] <- c(j, i)
}
}
# Rename columns and data frame
colnames(snp_wrangled) = c("snpID", "sequence")
### I have a long long string. I want to get the left 18~25 charactors and
# between 300 ~ 800 units away, I want another 18 ~ 25
df <- all_text_warngling(snp_wrangled,
start_distance,
end_distance,
center,
far,
shift)
View(df)
View(df[[2]][[1]])
df[[2]][[1]][[1]]
View(df[[2]][[3]])
df[[2]][[3]][[1]]
print("R get filter activated")
df <- stage1_filter(df, desired_tm, diff, Homodimer, hairpin)
print(df)
print("Filtered")
# Count how many candidates there are for each candidates
df <- df %>%
mutate(substrings_count = lengths(substrings),
faraway_count = lengths(faraway)) %>%
relocate(snpID, substrings_count, faraway_count, everything())
print("Tree search")
df
# Keep only certain amount of candidates
df[[4]] <- extract_top_n(df[[4]], top)
df[[5]] <- extract_top_n(df[[5]], top)
df <- df %>%
group_by(snpID) %>%
filter(substrings_count == max(substrings_count))
print(df)
level5 <- soulofmultiplex(df, Heterodimer_tm)
print(level5)
View(snp_sequence)
snp_sequence[[2]]
primer = "rs1121980, rs9939609, rs1421085, rs17817449"
shift = 100
desired_tm = 60
diff = 5
Heterodimer_tm = 50
Homodimer <- 45
top <- 2
source("functions.R")
options(repos = BiocManager::repositories())
# We will start exploring options 800 bp away from the SNP location upstream and downstream
center <- 800
hairpin <- 45
# from that distance of 800, we will search the range from 600 to 1,000. (800+200 and 800-200)
far <- 200
start_distance <- 15
end_distance <- 30
# Accessing database
print("Execute MART API")
snp_list <- strsplit(primer, " ")[[1]]
upStream <- center
downStream <- center
snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
snp_sequence <- getBM(attributes = c('refsnp_id', 'snp'),
filters = c('snp_filter', 'upstream_flank', 'downstream_flank'),
checkFilters = FALSE,
values = list(snp_list, upStream, downStream),
mart = snpmart,
bmHeader = TRUE)
#Create a new data frame
snp_wrangled <- data.frame(matrix(ncol = 2, nrow = 0))
View(snp_sequence)
snp_sequence[[2]]
## The main function
mart_api <- function(primer,
shift){
# We will start exploring options 800 bp away from the SNP location upstream and downstream
center <- 800
hairpin <- 45
# from that distance of 800, we will search the range from 600 to 1,000. (800+200 and 800-200)
far <- 200
start_distance <- 15
end_distance <- 30
# Accessing database
print("Execute MART API")
snp_list <- strsplit(primer, " ")[[1]]
upStream <- center
downStream <- center
snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
snp_sequence <- getBM(attributes = c('refsnp_id', 'snp'),
filters = c('snp_filter', 'upstream_flank', 'downstream_flank'),
checkFilters = FALSE,
values = list(snp_list, upStream, downStream),
mart = snpmart,
bmHeader = TRUE)
### Wrangling dataframe
#Create a new data frame
snp_wrangled <- data.frame(matrix(ncol = 2, nrow = 0))
# Add each variation as a new string into each row
for (j in snp_sequence$`Variant name`){
for (i in list_seq(snp_sequence$`Variant sequences`[snp_sequence$`Variant name`==j])){
snp_wrangled[nrow(snp_wrangled) + 1,] <- c(j, i)
}
}
# Rename columns and data frame
colnames(snp_wrangled) = c("snpID", "sequence")
### I have a long long string. I want to get the left 18~25 charactors and
# between 300 ~ 800 units away, I want another 18 ~ 25
df <- all_text_warngling(snp_wrangled,
start_distance,
end_distance,
center,
far,
shift)
df
print("Primer generated")
return(df)
}
# Rename columns and data frame
colnames(snp_wrangled) = c("snpID", "sequence")
### I have a long long string. I want to get the left 18~25 charactors and
# between 300 ~ 800 units away, I want another 18 ~ 25
df <- all_text_warngling(snp_wrangled,
start_distance,
end_distance,
center,
far,
shift)
df
View(df)
# Add each variation as a new string into each row
for (j in snp_sequence$`Variant name`){
for (i in list_seq(snp_sequence$`Variant sequences`[snp_sequence$`Variant name`==j])){
snp_wrangled[nrow(snp_wrangled) + 1,] <- c(j, i)
}
}
# Rename columns and data frame
colnames(snp_wrangled) = c("snpID", "sequence")
### I have a long long string. I want to get the left 18~25 charactors and
# between 300 ~ 800 units away, I want another 18 ~ 25
df <- all_text_warngling(snp_wrangled,
start_distance,
end_distance,
center,
far,
shift)
df
print("R get filter activated")
df <- stage1_filter(df, desired_tm, diff, Homodimer, hairpin)
print(df)
print("Filtered")
# Count how many candidates there are for each candidates
df <- df %>%
mutate(substrings_count = lengths(substrings),
faraway_count = lengths(faraway)) %>%
relocate(snpID, substrings_count, faraway_count, everything())
View(df)
print("Tree search")
df
# Keep only certain amount of candidates
df[[4]] <- extract_top_n(df[[4]], top)
df[[5]] <- extract_top_n(df[[5]], top)
df <- df %>%
group_by(snpID) %>%
filter(substrings_count == max(substrings_count))
print(df)
level5 <- soulofmultiplex(df, Heterodimer_tm)
print(level5)
runApp()
library(rprimer)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rprimer")
BiocManager::install("Biostrings")
library(rprimer)
library(Biostrings)
system.file("extdata", "example_alignment.txt", package = "rprimer")
filepath <- system.file("extdata", "example_alignment.txt", package = "rprimer")
myAlignment <- readDNAMultipleAlignment(filepath, format = "fasta")
system.file("extdata", "example_alignment.txt", package = "rprimer")
filepath <- system.file("extdata", "example_alignment.txt", package = "rprimer")
myAlignment <- readDNAMultipleAlignment(filepath, format = "fasta")
View(myAlignment)
View(myAlignment)
myAlignment@unmasked
View(myAlignment)
myAlignment
for (item in myAlignment) {
print(item)
}
for (i in seq_along(myAlignment)) {
# Access the i-th sequence in the set
current_sequence <- myAlignment[i]
print(current_sequence)
}
myAlignment
View(myAlignment)
print(myAlignment, n = 50)
print(myAlignment@ranges, n = 50)
print(myAlignment@pool, n = 50)
print(myAlignment@unmasked, n = 50)
print(myAlignment@unmasked)
# Increase the maximum number of printed rows
options(max.print = 10000)
# Now try printing the slot again
print(myAlignment@unmasked)
options(max.print = 10000)
print(myAlignment@unmasked)
# Print in chunks
chunk_size <- 10  # Define a reasonable chunk size
num_chunks <- ceiling(length(myAlignment@unmasked) / chunk_size)
for (i in seq_len(num_chunks)) {
cat(sprintf("Chunk %d:\n", i))
print(myAlignment@unmasked[(((i - 1) * chunk_size) + 1):(i * chunk_size)])
cat("-------------\n")
}
print(myAlignment@unmasked@ranges)
print(myAlignment@unmasked@pool)
print(myAlignment@unmasked@metadata)
print(myAlignment@unmasked@ranges)
# Read the file (assuming it's a text file, modify as needed)
data <- read.table(file_path, header = TRUE)
system.file("extdata", "example_alignment.txt", package = "rprimer")
filepath <- system.file("extdata", "example_alignment.txt", package = "rprimer")
# Read the file (assuming it's a text file, modify as needed)
data <- read.table(file_path, header = TRUE)
# View the first few rows of the data
head(data)
# Read the file (assuming it's a text file, modify as needed)
data <- read.table(file_path, header = TRUE)
filepath <- system.file("extdata", "example_alignment.txt", package = "rprimer")
filepath
myAlignment <- readDNAMultipleAlignment(filepath, format = "fasta")
myMaskedAlignment <- myAlignment
colmask(myMaskedAlignment, invert = TRUE) <- c(3000:4000, 5000:6000)
myOligos <- designOligos(myConsensusProfile)
library(rprimer)
library(Biostrings)
system.file("extdata", "example_alignment.txt", package = "rprimer")
filepath <- system.file("extdata", "example_alignment.txt", package = "rprimer")
myAlignment <- readDNAMultipleAlignment(filepath, format = "fasta")
myMaskedAlignment <- myAlignment
colmask(myMaskedAlignment, invert = TRUE) <- c(3000:4000, 5000:6000)
myOligos <- designOligos(myConsensusProfile)
myConsensusProfile <- consensusProfile(myAlignment, ambiguityThreshold = 0.05)
plotData(myConsensusProfile)
myOligos <- designOligos(myConsensusProfile)
myOligos
View(myOligos )
myOligos
myOligos
myOligos
