soulofmultiplex <- function(df, Heterodimer_tm){
list_3 <- list()
for (i in 1:length(df[[1]])){
list_3 <- c(list_3,
list(unlist(df[[4]][[i]])),
list(unlist(df[[5]][[i]])))
}
# Arrange the list from small to big
arranged_list <- list_3
# Prepare the initial list for multiplexing
level2 <- list()
level3 <- list()
level4 <- list()
level2 <- incoming_list(arranged_list[[1]])
level3 <- replace_end_nodes(incoming_list(arranged_list[[1]]),
incoming_list(arranged_list[[2]])
)
level3 <- replace_end_nodes(level3,
incoming_list(arranged_list[[3]])
)
str(level3)
# arranged_list
# Running
print(length(arranged_list))
for (i in 4:length(arranged_list)){
# Start a timer
start_time <- Sys.time()
# Get all the end points from the tree
endpoints <- get_endpoints(level3)
# Endpoints come back a little messy
endpoints <- clean_endpoints(endpoints)
print(paste("Start with ", length(endpoints)))
# Evalauate all the ned points to its parents
bad_nodes <- compute_bad_nodes(endpoints, Heterodimer_tm)
print(paste("We are removing: ", length(bad_nodes)))
# Remove bad nodes if there are any
if (length(bad_nodes) != 0){
level3 <- Iterate_remove(level3,bad_nodes)
level3 <- remove_empty_lists(level3)
}
# If all nodes are bad, return NULL
if (length(endpoints) == length(bad_nodes)){
print("All nodes are removed during the process")
return(NULL)
}
print(paste("After trimming: ", length(get_endpoints(level3))))
# Stop adding list if we are at the last level
if (1){
level4 <- incoming_list(arranged_list[[i]])
print(paste("New list: ", length(level4)))
level3 <- replace_end_nodes(level3, level4)
print(paste("level3 + level4: ", length(get_endpoints(level3))))
}
# Summarize results for this level
print(paste("How far are we: ", i))
print(paste("Time" , round(Sys.time() - start_time, 1)))
print("--------------------------")
}
level5 <- get_display_tree(level3, 3)
repeated_list <- rep(df[[1]], each = 2)
suffix <- c("_forward", "_reverse")
modified_list <- paste0(repeated_list, suffix[rep(1:length(suffix), length.out = length(repeated_list))])
rownames(level5) <- modified_list
level5 <- rbind(level5, Tm = c(round(mean(sapply(level5[[1]], calculate_tm)), 2),
round(mean(sapply(level5[[2]], calculate_tm)), 2),
round(mean(sapply(level5[[3]], calculate_tm)),2)))
return(level5)
}
level5 <- soulofmultiplex(df, Heterodimer_tm)
View(level5)
shift = 800
shift = 500
center <- 800
far <- 200
start_distance <- 15
end_distance <- 30
# Accessing database
print("Execute MART API")
snp_list <- strsplit(primer, " ")[[1]]
upStream <- center
downStream <- center
snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
snp_sequence <- getBM(attributes = c('refsnp_id', 'snp'),
filters = c('snp_filter', 'upstream_flank', 'downstream_flank'),
checkFilters = FALSE,
values = list(snp_list, upStream, downStream),
mart = snpmart,
bmHeader = TRUE)
#Create a new data frame
snp_wrangled <- data.frame(matrix(ncol = 2, nrow = 0))
# Add each variation as a new string into each row
for (j in snp_sequence$`Variant name`){
for (i in list_seq(snp_sequence$`Variant sequences`[snp_sequence$`Variant name`==j])){
snp_wrangled[nrow(snp_wrangled) + 1,] <- c(j, i)
}
}
# Rename columns and data frame
colnames(snp_wrangled) = c("snpID", "sequence")
### I have a long long string. I want to get the left 18~25 charactors and
# between 300 ~ 800 units away, I want another 18 ~ 25
df <- all_text_warngling(snp_wrangled,
start_distance,
end_distance,
center,
far,
shift)
df
print("R get filter activated")
df <- stage1_filter(df, desired_tm, diff, Homodimer, hairpin)
df
print("Filtered")
# Count how many candidates there are for each candidates
df <- df %>%
mutate(substrings_count = lengths(substrings),
faraway_count = lengths(faraway)) %>%
relocate(snpID, substrings_count, faraway_count, everything())
print("Tree search")
df
# Keep only certain amount of candidates
df[[4]] <- extract_top_n(df[[4]], top)
df[[5]] <- extract_top_n(df[[5]], top)
df <- df %>%
group_by(snpID) %>%
filter(substrings_count == max(substrings_count))
df
df
df[[1]]
df[[4]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/GitHub/Research-primer/Multiplexing App")
shiny::runApp()
runApp()
# Data processing
library(DT)
library(dplyr)
library(tidyverse)
library(stringi)
library(stringr)
library(mosaic)
library(purrr)
#graphing
library(ggplot2)
library(hexbin)
library(patchwork)
library(plotly)
# Bioinformatics
library(biomaRt)
library(spgs)
library(primer3)
# Deployment
library(shinydashboard)
library(shiny)
source("functions.R")
options(repos = BiocManager::repositories())
primer = "rs53576, rs1815739, rs7412, rs429358, rs6152"
shift = 500
desired_tm = 60
diff = 5
Heterodimer_tm = 15
Homodimer <- 45
top <- 2
hairpin <- 45
center <- 800
far <- 200
start_distance <- 15
end_distance <- 30
# Accessing database
print("Execute MART API")
snp_list <- strsplit(primer, " ")[[1]]
upStream <- center
downStream <- center
snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
snp_sequence <- getBM(attributes = c('refsnp_id', 'snp'),
filters = c('snp_filter', 'upstream_flank', 'downstream_flank'),
checkFilters = FALSE,
values = list(snp_list, upStream, downStream),
mart = snpmart,
bmHeader = TRUE)
#Create a new data frame
snp_wrangled <- data.frame(matrix(ncol = 2, nrow = 0))
# Add each variation as a new string into each row
for (j in snp_sequence$`Variant name`){
for (i in list_seq(snp_sequence$`Variant sequences`[snp_sequence$`Variant name`==j])){
snp_wrangled[nrow(snp_wrangled) + 1,] <- c(j, i)
}
}
# Rename columns and data frame
colnames(snp_wrangled) = c("snpID", "sequence")
### I have a long long string. I want to get the left 18~25 charactors and
# between 300 ~ 800 units away, I want another 18 ~ 25
df <- all_text_warngling(snp_wrangled,
start_distance,
end_distance,
center,
far,
shift)
df
print("R get filter activated")
df <- stage1_filter(df, desired_tm, diff, Homodimer, hairpin)
df
print("Filtered")
# Count how many candidates there are for each candidates
df <- df %>%
mutate(substrings_count = lengths(substrings),
faraway_count = lengths(faraway)) %>%
relocate(snpID, substrings_count, faraway_count, everything())
# Display the updated nested tibble
return(df)
df
print("Tree search")
df
# Keep only certain amount of candidates
df[[4]] <- extract_top_n(df[[4]], top)
df[[5]] <- extract_top_n(df[[5]], top)
df <- df %>%
group_by(snpID) %>%
filter(substrings_count == max(substrings_count))
df
level5 <- soulofmultiplex(df, Heterodimer_tm)
runApp()
df
level5 <- soulofmultiplex(df, Heterodimer_tm)
# primer = "rs53576, rs1815739, rs7412, rs429358, rs6152"
# shift = 500
# desired_tm = 60
# diff = 5
Heterodimer_tm = 50
level5 <- soulofmultiplex(df, Heterodimer_tm)
level5
runApp()
runApp()
runApp()
primer = "rs53576, rs1815739, rs7412, rs429358, rs6152"
shift = 500
desired_tm = 60
diff = 5
Heterodimer_tm = 50
Homodimer <- 45
top <- 2
# Data processing
library(DT)
library(dplyr)
library(tidyverse)
library(stringi)
library(stringr)
library(mosaic)
library(purrr)
#graphing
library(ggplot2)
library(hexbin)
library(patchwork)
library(plotly)
# Bioinformatics
library(biomaRt)
library(spgs)
library(primer3)
# Deployment
library(shinydashboard)
library(shiny)
source("functions.R")
options(repos = BiocManager::repositories())
runApp()
runApp()
runApp()
primer = "rs53576, rs1815739, rs7412, rs429358, rs6152"
shift = 100
desired_tm = 60
diff = 5
Heterodimer_tm = 50
Homodimer <- 45
top <- 2
center <- 800
hairpin <- 45
far <- 200
start_distance <- 15
end_distance <- 30
# Accessing database
print("Execute MART API")
snp_list <- strsplit(primer, " ")[[1]]
upStream <- center
downStream <- center
snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
snp_sequence <- getBM(attributes = c('refsnp_id', 'snp'),
filters = c('snp_filter', 'upstream_flank', 'downstream_flank'),
checkFilters = FALSE,
values = list(snp_list, upStream, downStream),
mart = snpmart,
bmHeader = TRUE)
### Wrangling dataframe
#Create a new data frame
snp_wrangled <- data.frame(matrix(ncol = 2, nrow = 0))
View(snp_sequence)
snp_sequence[[1]]
snp_sequence[[2]][[1]]
reverseComplement("CCGATGACCTGCAGACGC")
reverseComplement("GGGCACAAGGAGTGGGACG")
reverseComplement("GGGCACAAGGAGTGGGACG")
reverseComplement("CACAAGGAGTGGG")
View(snp_sequence)
snp_sequence[[2]][[2]]
reverseComplement("AGGCGGTCGCGGGTCC")
snp_sequence[[2]][[3]]
snp_sequence[[2]][[4]]
snp_sequence[[2]][[5]]
reverseComplement("TGTTCCACCAGGGGCCC")
reverseComplement(" CCTGTTTCTGTGGGACTGAGGAT")
reverseComplement("GGGCACAAGGAGTGGGACG")
reve("TGGCACCTCGCTCCCG")
reverseComplement("TGGCACCTCGCTCCCG")
center <- 800
hairpin <- 45
far <- 200
start_distance <- 15
end_distance <- 30
# Accessing database
print("Execute MART API")
snp_list <- strsplit(primer, " ")[[1]]
upStream <- center
downStream <- center
snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
snp_sequence <- getBM(attributes = c('refsnp_id', 'snp'),
filters = c('snp_filter', 'upstream_flank', 'downstream_flank'),
checkFilters = FALSE,
values = list(snp_list, upStream, downStream),
mart = snpmart,
bmHeader = TRUE)
#Create a new data frame
snp_wrangled <- data.frame(matrix(ncol = 2, nrow = 0))
# Add each variation as a new string into each row
for (j in snp_sequence$`Variant name`){
for (i in list_seq(snp_sequence$`Variant sequences`[snp_sequence$`Variant name`==j])){
snp_wrangled[nrow(snp_wrangled) + 1,] <- c(j, i)
}
}
# Rename columns and data frame
colnames(snp_wrangled) = c("snpID", "sequence")
### I have a long long string. I want to get the left 18~25 charactors and
# between 300 ~ 800 units away, I want another 18 ~ 25
df <- all_text_warngling(snp_wrangled,
start_distance,
end_distance,
center,
far,
shift)
df
print("Primer generated")
print("R get filter activated")
df <- stage1_filter(df, desired_tm, diff, Homodimer, hairpin)
print(df)
print("Filtered")
# Count how many candidates there are for each candidates
df <- df %>%
mutate(substrings_count = lengths(substrings),
faraway_count = lengths(faraway)) %>%
relocate(snpID, substrings_count, faraway_count, everything())
print("Tree search")
df
# Keep only certain amount of candidates
df[[4]] <- extract_top_n(df[[4]], top)
df[[5]] <- extract_top_n(df[[5]], top)
df <- df %>%
group_by(snpID) %>%
filter(substrings_count == max(substrings_count))
print(df)
# Start a timer
start_time <- Sys.time()
# Get all the end points from the tree
endpoints <- get_endpoints(level3)
list_3 <- list()
for (i in 1:length(df[[1]])){
list_3 <- c(list_3,
list(unlist(df[[4]][[i]])),
list(unlist(df[[5]][[i]])))
}
# Arrange the list from small to big
arranged_list <- list_3
# Prepare the initial list for multiplexing
level2 <- list()
level3 <- list()
level4 <- list()
level2 <- incoming_list(arranged_list[[1]])
level3 <- replace_end_nodes(incoming_list(arranged_list[[1]]),
incoming_list(arranged_list[[2]])
)
level3 <- replace_end_nodes(level3,
incoming_list(arranged_list[[3]])
)
str(level3)
# arranged_list
# Running
print(length(arranged_list))
for (i in 4:length(arranged_list)){
# Start a timer
start_time <- Sys.time()
# Get all the end points from the tree
endpoints <- get_endpoints(level3)
# Endpoints come back a little messy
endpoints <- clean_endpoints(endpoints)
print(paste("Start with ", length(endpoints)))
# Evalauate all the ned points to its parents
bad_nodes <- compute_bad_nodes(endpoints, Heterodimer_tm)
print(paste("We are removing: ", length(bad_nodes)))
# Remove bad nodes if there are any
if (length(bad_nodes) != 0){
level3 <- Iterate_remove(level3,bad_nodes)
level3 <- remove_empty_lists(level3)
}
# If all nodes are bad, return NULL
if (length(endpoints) == length(bad_nodes)){
print("All nodes are removed during the process")
return(NULL)
}
print(paste("After trimming: ", length(get_endpoints(level3))))
# Stop adding list if we are at the last level
if (1){
level4 <- incoming_list(arranged_list[[i]])
print(paste("New list: ", length(level4)))
level3 <- replace_end_nodes(level3, level4)
print(paste("level3 + level4: ", length(get_endpoints(level3))))
}
# Summarize results for this level
print(paste("How far are we: ", i))
print(paste("Time" , round(Sys.time() - start_time, 1)))
print("--------------------------")
}
level5 <- get_display_tree(level3, 3)
level5
View(level5)
View(level3)
level5
runApp()
reverseComplement("TGGCACCTCGCTCCCG")
Heterodimer_tm("GCGGACATGGAGGACGCGT", "GCGGCCCTGTTCCACCAG")
dimer_tm("GCGGACATGGAGGACGCGT", "GCGGCCCTGTTCCACCAG")
Homodimer("GCGGACATGGAGGACGCGT", "GCGGCCCTGTTCCACCAG")
Homodimer("GCGGACATGGAGGACGCGT")
# Data processing
library(DT)
library(dplyr)
library(tidyverse)
library(stringi)
library(stringr)
library(mosaic)
library(purrr)
#graphing
library(ggplot2)
library(hexbin)
library(patchwork)
library(plotly)
# Bioinformatics
library(biomaRt)
library(spgs)
library(primer3)
# Deployment
library(shinydashboard)
library(shiny)
source("functions.R")
options(repos = BiocManager::repositories())
Homodimer("GCGGACATGGAGGACGCGT")
Homodimer(GCGGACATGGAGGACGCGT)
Homodimer()
library(primer3)
Heterodimer_tm("ATTA")
Homodimer()
?Homodimer()
Homodimer()
library(primer3)
Homodimer(AT)
Homodimer("ATTA")
# Data processing
library(DT)
library(dplyr)
library(tidyverse)
library(stringi)
library(stringr)
library(mosaic)
library(purrr)
#graphing
library(ggplot2)
library(hexbin)
library(patchwork)
library(plotly)
# Bioinformatics
library(biomaRt)
library(spgs)
library(primer3)
# Deployment
library(shinydashboard)
library(shiny)
source("functions.R")
options(repos = BiocManager::repositories())
hetero
library(primer3)
primer3::calculate_homodimer()
calculate_homodimer("GCGGACATGGAGGACGCGT")
calculate_dimer("TCGTCCAGGCGGTCGCGGGTCC", "GCGGACATGGAGGACGCGT")
calculate_dimer("ccctgtttctgtgggactgaggat", "tgaaatcaccacagggcagaaacc")
calculate_tm("tcgtccaggcggtcgcgggtcc ")
calculate_tm("tcgtccaggcggtcgcgggtcc")
calculate_tm("tcgtccaggcggtcgcgggtcc")
calculate_tm("ACTTCTC")
calculate_tm("tcgtccaggcc")
calculate_tm("tcgtcc")
calculate_tm("tcg")
calculate_tm("tg")
calculate_tm("TCGTCCAGGCGGTCGCGGGTCC")
calculate_tm("TGGCACCTCGCTCGCG")
