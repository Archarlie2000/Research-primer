# print("output2")
# print(output2)
list_1 <- output1
list_2 <- output2
final <- output1
}
}
}
final
class(final)
class(final[[1]])
omega <- do.call(rbind, lapply(final, data.frame))
View(omega)
do.call(rbind, lapply(final, data.frame))
final
omega <- bind_rows(lapply(final, as.data.frame))
View(omega)
bind_rows(lapply(final, as.data.frame))
final[[1]]
final[[2]]
omega <- cbind(final[[1]],
final[[2]],
final[[3]],
final[[4]],
final[[5]],
final[[6]],
final[[7]],
final[[8]])
list_1 <- list(arranged_list[[1]])
list_2 <- list(arranged_list[[2]])
len_1 <- length(list_1[[1]])
len_2 <- length(list_2[[1]])
level <- 3
for (level in 3:levels+1){
if (length(list_1) != 0 && length(list_2) != 0){
len_1 <- length(list_1)
print(paste("length 1:", len_1))
len_2 <- length(list_2[[1]])
print(paste("length 2:", len_2))
combination <- expand.grid(append(list_1, list_2))
print(paste("Total rows", level, "-------", nrow(combination)))
indices <- evaluation_new(combination, len_1, len_2)
# print(indices)
if (level == 3){
output1 <- append(list(unlist(list_1)[unlist(indices[1])]),
list(unlist(list_2)[unlist(indices[2])]))
}
else
{
output1 <- append(list_1,
list(unlist(list_2)[unlist(indices[2])]))
}
if (level == levels+1){
final <- output1
}
else{
# print("output1")
# print(output1)
output2 <- list(arranged_list[[level]])
# print("output2")
# print(output2)
list_1 <- output1
list_2 <- output2
final <- output1
}
}
}
omega <- cbind(final[[1]],
final[[2]],
final[[3]],
final[[4]],
final[[5]],
final[[6]],
final[[7]],
final[[8]])
omega <- cbind(final[[1]],
final[[2]],
final[[3]],
final[[4]],
final[[5]],
final[[6]],
final[[7]])
final
setwd("~/GitHub/Research-primer/Multiplexing App")
top <- 10
library(DT)
library(dplyr)
library(tidyverse)
library(stringi)
#graphing
library(ggplot2)
library(hexbin)
library(patchwork)
library(plotly)
# Bioinformatics
library(biomaRt)
library(spgs)
library(primer3)
# Deployment
library(shinydashboard)
library(shiny)
source("functions.R")
options(repos = BiocManager::repositories())
setwd("~/GitHub/Research-primer/Multiplexing App")
primer <- "rs1121980, rs9939609, rs7903146, rs4402960"
primer_away <- 450
primer_min <- 18
primer_max <- 25
primer_left_min <- 18
primer_left_max <- 25
left_TM <- 70
right_TM <- 70
left_hair_TM <- 35
right_hair_TM <- 35
diff <- 2
Homodimer_left_dg <- 30
Homodimer_right_dg <- 30
Heterodimer_dg <- 10
shift <- 150
left_TM_max = 68
left_TM_min = 55
## Not sure why, but it works
primer_away <- -primer_away
# Accessing database
print("Execute MART API")
snp_list <- strsplit(primer, " ")[[1]]
upStream <- c("500")
downStream <- c("500")
snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
snp_sequence <- getBM(attributes = c('refsnp_id', 'snp'),
filters = c('snp_filter', 'upstream_flank', 'downstream_flank'),
checkFilters = FALSE,
values = list(snp_list, upStream, downStream),
mart = snpmart,
bmHeader = TRUE)
### Wrangling dataframe
print("Data gathered")
#Create a new data frame
snp_wrangled <- data.frame(matrix(ncol = 2, nrow = 0))
#Create a new data frame
snp_wrangled <- data.frame(matrix(ncol = 2, nrow = 0))
# Add each variation as a new string into each row
for (j in snp_sequence$`Variant name`){
for (i in list_seq(snp_sequence$`Variant sequences`[snp_sequence$`Variant name`==j])){
snp_wrangled[nrow(snp_wrangled) + 1,] <- c(j, i)
}
}
# Rename columns and data frame
colnames(snp_wrangled) = c("snpID", "sequence")
variantsTrimmed <- snp_wrangled
variantsTrimmed_ghost <- snp_wrangled
mismatch_list_collected <- data.frame(Identify = c(),
Forward = c(),
Reversed = c()
)
print("Start big loop")
clock = 1
for (primer_away in primer_away:(primer_away + shift)){
print("Iteration")
clock = round((clock + 1) /shift, 2)
print(clock)
# add columns for the substrings leading up to and including the variant site
# produce right flanking left primer
for (i in primer_left_min:primer_left_max) {
colname <- paste0("left", i)
variantsTrimmed <- variantsTrimmed %>%
mutate(!!colname := str_sub(sequence, 501 - i, 501))
}
# produce right flanking right primer
for (i in primer_min:primer_max) {
colname <- paste0("right", 500 - primer_away - i)
variantsTrimmed <- variantsTrimmed %>% mutate(!!colname := str_sub(sequence,
500 - primer_away - i,
500 - primer_away))
}
# produce left flanking left primer
for (i in primer_left_min:primer_left_max) {
colname <- paste0("(left_flanking)_left", i)
variantsTrimmed_ghost <- variantsTrimmed_ghost %>%
mutate(!!colname := str_sub(sequence, 501, 500 + i))
}
# produce left flanking right primer
for (i in primer_min:primer_max) {
colname <- paste0("(left_flanking)_right", 500 + primer_away + i)
variantsTrimmed_ghost <- variantsTrimmed_ghost %>% mutate(!!colname := str_sub(sequence,
500 + primer_away - i,
500 + primer_away))
}
## Define the range of flanking for pivoting (right flanking)
limit_left_start <- paste("left", primer_left_max, sep = "")
limit_left_stop <- paste("left", primer_left_min, sep = "")
limit_right_start <- paste("right", 500 - primer_away - primer_max, sep = "")
limit_right_stop <- paste("right", 500 - primer_away - primer_min, sep = "")
## Define the range of flanking for pivoting (left flanking)
left_flanking_limit_left_start <- paste("(left_flanking)_left", primer_left_max, sep = "")
left_flanking_limit_left_stop <- paste("(left_flanking)_left", primer_left_min, sep = "")
left_flanking_limit_right_start <- paste("(left_flanking)_right", 500 + primer_away + primer_max, sep = "")
left_flanking_limit_right_stop <- paste("(left_flanking)_right", 500 + primer_away + primer_min, sep = "")
## Pivot the column into a long list
variantsTrimmed_temp_1 <- pivot_longer(variantsTrimmed,
cols = limit_left_start:limit_left_stop,
names_to = "Left_side",
values_to = "leftPrimers") %>%
pivot_longer(
cols = limit_right_start:limit_right_stop,
names_to = "Right_side",
values_to = "rightPrimers")
variantsTrimmed_temp_2 <- pivot_longer(variantsTrimmed_ghost,
cols = left_flanking_limit_left_start:left_flanking_limit_left_stop,
names_to = "left_flanking_Left_side",
values_to = "left_flanking_leftPrimers") %>%
pivot_longer(
cols = left_flanking_limit_right_start:left_flanking_limit_right_stop,
names_to = "left_flanking_Right_side",
values_to = "left_flanking_rightPrimers")
## combine left and flanking into a longer list since
## previous one is not split in the right way
vt_partition_1 <- cbind(variantsTrimmed_temp_1$snpID,
variantsTrimmed_temp_1$Left_side,
variantsTrimmed_temp_1$leftPrimers,
variantsTrimmed_temp_1$Right_side,
variantsTrimmed_temp_1$rightPrimers,
"right"
)
vt_partition_2 <- cbind(variantsTrimmed_temp_2$snpID,
variantsTrimmed_temp_2$left_flanking_Right_side,
variantsTrimmed_temp_2$left_flanking_rightPrimers,
variantsTrimmed_temp_2$left_flanking_Left_side,
variantsTrimmed_temp_2$left_flanking_leftPrimers,
"left")
variantsTrimmed2 <- rbind(vt_partition_1,vt_partition_2) %>% data.frame()
colnames(variantsTrimmed2) <- c("snp",
"forward_position",
"forward_primer",
"reversed_position",
"reversed_primer",
"flanking_direction")
## Fix the syntax for naming
variantsTrimmed2$forward_position <-  gsub("[(left_flanking)_]", "",
as.character(variantsTrimmed2$forward_position))
variantsTrimmed2$reversed_position <-  gsub("[(left_flanking)_right]", "",
as.character(variantsTrimmed2$reversed_position))
### Get mismatches for left primers depend on the flanking direaction
for (i in 1:nrow(variantsTrimmed2)){
if (variantsTrimmed2$flanking_direction[i] == "right")
{variantsTrimmed2$reversed_primer[i] <-  toupper(reverseComplement(variantsTrimmed2$reversed_primer[i]))
variantsTrimmed2$strong_mismatch_1[i] <-  get_strong1(variantsTrimmed2$forward_primer[i])
variantsTrimmed2$strong_mismatch_2[i] <-  get_strong2(variantsTrimmed2$forward_primer[i])
variantsTrimmed2$medium_mismatch[i] <-  get_medium1(variantsTrimmed2$forward_primer[i])
variantsTrimmed2$weak_mismatch[i] <-  get_weak1(variantsTrimmed2$forward_primer[i])
} else
{
variantsTrimmed2$forward_primer[i] <-  toupper(reverseComplement(variantsTrimmed2$forward_primer[i]))
variantsTrimmed2$strong_mismatch_1[i] <-  left_flanking_get_strong1(variantsTrimmed2$forward_primer[i])
variantsTrimmed2$strong_mismatch_2[i] <-  left_flanking_get_strong2(variantsTrimmed2$forward_primer[i])
variantsTrimmed2$medium_mismatch[i] <-  left_flanking_get_medium1(variantsTrimmed2$forward_primer[i])
variantsTrimmed2$weak_mismatch[i] <-  left_flanking_get_weak1(variantsTrimmed2$forward_primer[i])}
}
## Pivot all mismtaches into a long list
## Remove all Ns from primer list
## get reversed complementrayr for right primer
## deselect some columns
mismatch_list <- variantsTrimmed2 %>%
pivot_longer(
cols = c(strong_mismatch_1,
strong_mismatch_2,
medium_mismatch,
weak_mismatch),
names_to = "Mismatch",
values_to = "primer",
values_drop_na = TRUE) %>%
filter(primer != "N") %>%
mutate(identity = paste(snp, flanking_direction)) %>%
as.data.frame() %>%
dplyr::select(c(9, 8, 5))
colnames(mismatch_list) = c("identity", "Forward", "Reversed")
print("nrow(mismatch_list)")
print(nrow(mismatch_list))
mismatch_list_collected <- rbind(mismatch_list_collected, mismatch_list)
}
clock = 1
for (primer_away in primer_away:(primer_away + shift)){
print("Iteration")
clock = clock +1
print(clock)
# add columns for the substrings leading up to and including the variant site
# produce right flanking left primer
for (i in primer_left_min:primer_left_max) {
colname <- paste0("left", i)
variantsTrimmed <- variantsTrimmed %>%
mutate(!!colname := str_sub(sequence, 501 - i, 501))
}
# produce right flanking right primer
for (i in primer_min:primer_max) {
colname <- paste0("right", 500 - primer_away - i)
variantsTrimmed <- variantsTrimmed %>% mutate(!!colname := str_sub(sequence,
500 - primer_away - i,
500 - primer_away))
}
# produce left flanking left primer
for (i in primer_left_min:primer_left_max) {
colname <- paste0("(left_flanking)_left", i)
variantsTrimmed_ghost <- variantsTrimmed_ghost %>%
mutate(!!colname := str_sub(sequence, 501, 500 + i))
}
# produce left flanking right primer
for (i in primer_min:primer_max) {
colname <- paste0("(left_flanking)_right", 500 + primer_away + i)
variantsTrimmed_ghost <- variantsTrimmed_ghost %>% mutate(!!colname := str_sub(sequence,
500 + primer_away - i,
500 + primer_away))
}
## Define the range of flanking for pivoting (right flanking)
limit_left_start <- paste("left", primer_left_max, sep = "")
limit_left_stop <- paste("left", primer_left_min, sep = "")
limit_right_start <- paste("right", 500 - primer_away - primer_max, sep = "")
limit_right_stop <- paste("right", 500 - primer_away - primer_min, sep = "")
## Define the range of flanking for pivoting (left flanking)
left_flanking_limit_left_start <- paste("(left_flanking)_left", primer_left_max, sep = "")
left_flanking_limit_left_stop <- paste("(left_flanking)_left", primer_left_min, sep = "")
left_flanking_limit_right_start <- paste("(left_flanking)_right", 500 + primer_away + primer_max, sep = "")
left_flanking_limit_right_stop <- paste("(left_flanking)_right", 500 + primer_away + primer_min, sep = "")
## Pivot the column into a long list
variantsTrimmed_temp_1 <- pivot_longer(variantsTrimmed,
cols = limit_left_start:limit_left_stop,
names_to = "Left_side",
values_to = "leftPrimers") %>%
pivot_longer(
cols = limit_right_start:limit_right_stop,
names_to = "Right_side",
values_to = "rightPrimers")
variantsTrimmed_temp_2 <- pivot_longer(variantsTrimmed_ghost,
cols = left_flanking_limit_left_start:left_flanking_limit_left_stop,
names_to = "left_flanking_Left_side",
values_to = "left_flanking_leftPrimers") %>%
pivot_longer(
cols = left_flanking_limit_right_start:left_flanking_limit_right_stop,
names_to = "left_flanking_Right_side",
values_to = "left_flanking_rightPrimers")
## combine left and flanking into a longer list since
## previous one is not split in the right way
vt_partition_1 <- cbind(variantsTrimmed_temp_1$snpID,
variantsTrimmed_temp_1$Left_side,
variantsTrimmed_temp_1$leftPrimers,
variantsTrimmed_temp_1$Right_side,
variantsTrimmed_temp_1$rightPrimers,
"right"
)
vt_partition_2 <- cbind(variantsTrimmed_temp_2$snpID,
variantsTrimmed_temp_2$left_flanking_Right_side,
variantsTrimmed_temp_2$left_flanking_rightPrimers,
variantsTrimmed_temp_2$left_flanking_Left_side,
variantsTrimmed_temp_2$left_flanking_leftPrimers,
"left")
variantsTrimmed2 <- rbind(vt_partition_1,vt_partition_2) %>% data.frame()
colnames(variantsTrimmed2) <- c("snp",
"forward_position",
"forward_primer",
"reversed_position",
"reversed_primer",
"flanking_direction")
## Fix the syntax for naming
variantsTrimmed2$forward_position <-  gsub("[(left_flanking)_]", "",
as.character(variantsTrimmed2$forward_position))
variantsTrimmed2$reversed_position <-  gsub("[(left_flanking)_right]", "",
as.character(variantsTrimmed2$reversed_position))
### Get mismatches for left primers depend on the flanking direaction
for (i in 1:nrow(variantsTrimmed2)){
if (variantsTrimmed2$flanking_direction[i] == "right")
{variantsTrimmed2$reversed_primer[i] <-  toupper(reverseComplement(variantsTrimmed2$reversed_primer[i]))
variantsTrimmed2$strong_mismatch_1[i] <-  get_strong1(variantsTrimmed2$forward_primer[i])
variantsTrimmed2$strong_mismatch_2[i] <-  get_strong2(variantsTrimmed2$forward_primer[i])
variantsTrimmed2$medium_mismatch[i] <-  get_medium1(variantsTrimmed2$forward_primer[i])
variantsTrimmed2$weak_mismatch[i] <-  get_weak1(variantsTrimmed2$forward_primer[i])
} else
{
variantsTrimmed2$forward_primer[i] <-  toupper(reverseComplement(variantsTrimmed2$forward_primer[i]))
variantsTrimmed2$strong_mismatch_1[i] <-  left_flanking_get_strong1(variantsTrimmed2$forward_primer[i])
variantsTrimmed2$strong_mismatch_2[i] <-  left_flanking_get_strong2(variantsTrimmed2$forward_primer[i])
variantsTrimmed2$medium_mismatch[i] <-  left_flanking_get_medium1(variantsTrimmed2$forward_primer[i])
variantsTrimmed2$weak_mismatch[i] <-  left_flanking_get_weak1(variantsTrimmed2$forward_primer[i])}
}
## Pivot all mismtaches into a long list
## Remove all Ns from primer list
## get reversed complementrayr for right primer
## deselect some columns
mismatch_list <- variantsTrimmed2 %>%
pivot_longer(
cols = c(strong_mismatch_1,
strong_mismatch_2,
medium_mismatch,
weak_mismatch),
names_to = "Mismatch",
values_to = "primer",
values_drop_na = TRUE) %>%
filter(primer != "N") %>%
mutate(identity = paste(snp, flanking_direction)) %>%
as.data.frame() %>%
dplyr::select(c(9, 8, 5))
colnames(mismatch_list) = c("identity", "Forward", "Reversed")
print("nrow(mismatch_list)")
print(nrow(mismatch_list))
mismatch_list_collected <- rbind(mismatch_list_collected, mismatch_list)
}
primer <- "rs1121980, rs9939609, rs7903146, rs4402960"
primer_away <- 450
primer_min <- 18
primer_max <- 25
primer_left_min <- 18
primer_left_max <- 25
left_TM <- 70
right_TM <- 70
left_hair_TM <- 35
right_hair_TM <- 35
diff <- 2
Homodimer_left_dg <- 30
Homodimer_right_dg <- 30
Heterodimer_dg <- 10
shift <- 150
left_TM_max = 68
left_TM_min = 55
## Not sure why, but it works
primer_away <- -primer_away
# Accessing database
print("Execute MART API")
snp_list <- strsplit(primer, " ")[[1]]
upStream <- c("500")
downStream <- c("500")
snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
snp_sequence <- getBM(attributes = c('refsnp_id', 'snp'),
filters = c('snp_filter', 'upstream_flank', 'downstream_flank'),
checkFilters = FALSE,
values = list(snp_list, upStream, downStream),
mart = snpmart,
bmHeader = TRUE)
snp_sequence
### Wrangling dataframe
print("Data gathered")
#Create a new data frame
snp_wrangled <- data.frame(matrix(ncol = 2, nrow = 0))
snp_wrangled
# Add each variation as a new string into each row
for (j in snp_sequence$`Variant name`){
for (i in list_seq(snp_sequence$`Variant sequences`[snp_sequence$`Variant name`==j])){
snp_wrangled[nrow(snp_wrangled) + 1,] <- c(j, i)
}
}
# Data processing
library(DT)
library(dplyr)
library(tidyverse)
library(stringi)
#graphing
library(ggplot2)
library(hexbin)
library(patchwork)
library(plotly)
# Bioinformatics
library(biomaRt)
library(spgs)
library(primer3)
# Deployment
library(shinydashboard)
library(shiny)
source("functions.R")
options(repos = BiocManager::repositories())
primer <- "rs1121980, rs9939609, rs7903146, rs4402960"
primer_away <- 450
primer_min <- 18
primer_max <- 25
primer_left_min <- 18
primer_left_max <- 25
left_TM <- 70
right_TM <- 70
left_hair_TM <- 35
right_hair_TM <- 35
diff <- 2
Homodimer_left_dg <- 30
Homodimer_right_dg <- 30
Heterodimer_dg <- 10
shift <- 150
left_TM_max = 68
left_TM_min = 55
## Not sure why, but it works
primer_away <- -primer_away
# Accessing database
print("Execute MART API")
snp_list <- strsplit(primer, " ")[[1]]
upStream <- c("500")
downStream <- c("500")
snpmart <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
# Data processing
library(DT)
library(dplyr)
library(tidyverse)
library(stringi)
#graphing
library(ggplot2)
library(hexbin)
library(patchwork)
library(plotly)
# Bioinformatics
library(biomaRt)
library(spgs)
library(primer3)
# Deployment
library(shinydashboard)
library(shiny)
source("functions.R")
options(repos = BiocManager::repositories())
runApp('Multiplexing App')
