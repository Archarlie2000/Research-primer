substrings_right <- list()
for (item in string) {
center = center + 1
start_distance = start_distance + 1
end_distance = end_distance + 1
# right flanking
for (distance in start_distance:end_distance) {
# print(substr(string, center, center + distance))
sub <- substr(string, center, center + distance)
substrings_right <- c(substrings_right)
}
# Left flanking
for (distance in start_distance:end_distance) {
# print(substr(string, center -distance, center))
sub <- substr(string, center -distance, center)
substrings_left <- c(substrings_left,
get_strong1(sub),
get_strong2(sub),
get_medium1(sub),
get_weak1(sub))
}
}
# Return the extracted substrings
return(list(left = substrings_left[!substrings_left %in% "N"],
right = substrings_right[!substrings_right %in% "N"]))
}
grouped_sequences <- snp_wrangled %>%
group_by(snpID) %>%
summarize(sequence_list = list(sequence)) %>%
mutate(substrings = map(sequence_list, ~extract_substrings(.x,
center,
start_distance,
end_distance))) %>%
unnest(substrings)
###########
extract_substrings <- function(string, center, start_distance , end_distance) {
# Empty lists to store substrings
substrings_left <- list()
substrings_right <- list()
for (item in string) {
center = center + 1
start_distance = start_distance + 1
end_distance = end_distance + 1
# right flanking
for (distance in start_distance:end_distance) {
# print(substr(string, center, center + distance))
sub <- substr(string, center, center + distance)
substrings_right <- c(substrings_right)
}
# Left flanking
for (distance in start_distance:end_distance) {
# print(substr(string, center -distance, center))
sub <- substr(string, center -distance, center)
substrings_left <- c(substrings_left)
}
}
# Return the extracted substrings
return(list(left = substrings_left[!substrings_left %in% "N"],
right = substrings_right[!substrings_right %in% "N"]))
}
grouped_sequences <- snp_wrangled %>%
group_by(snpID) %>%
summarize(sequence_list = list(sequence)) %>%
mutate(substrings = map(sequence_list, ~extract_substrings(.x,
center,
start_distance,
end_distance))) %>%
unnest(substrings)
###########
extract_substrings <- function(string, center, start_distance , end_distance) {
# Empty lists to store substrings
substrings_left <- list()
substrings_right <- list()
for (item in string) {
center = center + 1
start_distance = start_distance + 1
end_distance = end_distance + 1
# right flanking
for (distance in start_distance:end_distance) {
# print(substr(string, center, center + distance))
sub <- substr(string, center, center + distance)
substrings_right <- c(substrings_right,
toupper(reverseComplement(get_strong1(sub))),
toupper(reverseComplement(get_strong2(sub))),
toupper(reverseComplement(get_medium1(sub))),
toupper(reverseComplement(get_weak1(sub))))
}
# Left flanking
for (distance in start_distance:end_distance) {
# print(substr(string, center -distance, center))
sub <- substr(string, center -distance, center)
substrings_left <- c(substrings_left)
}
}
# Return the extracted substrings
return(list(left = substrings_left[!substrings_left %in% "N"],
right = substrings_right[!substrings_right %in% "N"]))
}
grouped_sequences <- snp_wrangled %>%
group_by(snpID) %>%
summarize(sequence_list = list(sequence)) %>%
mutate(substrings = map(sequence_list, ~extract_substrings(.x,
center,
start_distance,
end_distance))) %>%
unnest(substrings)
rlang::last_trace()
grouped_sequences <- snp_wrangled %>%
group_by(snpID) %>%
summarize(sequence_list = list(sequence)) %>%
mutate(substrings = map(sequence_list, ~extract_substrings(.x,
center,
start_distance,
end_distance))) %>%
unnest(substrings)
extract_substrings <- function(string, center, start_distance , end_distance) {
# Empty lists to store substrings
substrings_left <- list()
substrings_right <- list()
for (item in string) {
center = center + 1
start_distance = start_distance + 1
end_distance = end_distance + 1
# right flanking
for (distance in start_distance:end_distance) {
sub <- substr(string, center, center + distance)
print(sub)
substrings_right <- c(substrings_right,
toupper(reverseComplement(get_strong1(sub))),
toupper(reverseComplement(get_strong2(sub))),
toupper(reverseComplement(get_medium1(sub))),
toupper(reverseComplement(get_weak1(sub))))
}
# Left flanking
for (distance in start_distance:end_distance) {
# print(substr(string, center -distance, center))
sub <- substr(string, center -distance, center)
substrings_left <- c(substrings_left,
get_strong1(sub),
get_strong2(sub),
get_medium1(sub),
get_weak1(sub))
}
}
# Return the extracted substrings
return(list(left = substrings_left[!substrings_left %in% "N"],
right = substrings_right[!substrings_right %in% "N"]))
}
grouped_sequences <- snp_wrangled %>%
group_by(snpID) %>%
summarize(sequence_list = list(sequence)) %>%
mutate(substrings = map(sequence_list, ~extract_substrings(.x,
center,
start_distance,
end_distance))) %>%
unnest(substrings)
extract_substrings <- function(string, center, start_distance , end_distance) {
# Empty lists to store substrings
substrings_left <- list()
substrings_right <- list()
for (item in string) {
center = center + 1
start_distance = start_distance + 1
end_distance = end_distance + 1
print(paste("item ", item))
# right flanking
for (distance in start_distance:end_distance) {
sub <- substr(string, center, center + distance)
print(sub)
substrings_right <- c(substrings_right,
toupper(reverseComplement(get_strong1(sub))),
toupper(reverseComplement(get_strong2(sub))),
toupper(reverseComplement(get_medium1(sub))),
toupper(reverseComplement(get_weak1(sub))))
}
# Left flanking
for (distance in start_distance:end_distance) {
# print(substr(string, center -distance, center))
sub <- substr(string, center -distance, center)
substrings_left <- c(substrings_left,
get_strong1(sub),
get_strong2(sub),
get_medium1(sub),
get_weak1(sub))
}
}
# Return the extracted substrings
return(list(left = substrings_left[!substrings_left %in% "N"],
right = substrings_right[!substrings_right %in% "N"]))
}
grouped_sequences <- snp_wrangled %>%
group_by(snpID) %>%
summarize(sequence_list = list(sequence)) %>%
mutate(substrings = map(sequence_list, ~extract_substrings(.x,
center,
start_distance,
end_distance))) %>%
unnest(substrings)
grouped_sequences <- snp_wrangled %>%
group_by(snpID) %>%
summarize(sequence_list = list(sequence))
grouped_sequences[[2]]
grouped_sequences[[2]][[1]]
extract_substrings <- function(string, center, start_distance , end_distance) {
# Empty lists to store substrings
substrings_left <- list()
substrings_right <- list()
for (item in string) {
center = center + 1
start_distance = start_distance + 1
end_distance = end_distance + 1
print(paste("item ", item))
# right flanking
for (distance in start_distance:end_distance) {
sub <- substr(string, center, center + distance)
print(sub)
print(toupper(reverseComplement(get_strong1(sub))))
print(toupper(reverseComplement(get_strong2(sub))))
substrings_right <- c(substrings_right,
toupper(reverseComplement(get_strong1(sub))),
toupper(reverseComplement(get_strong2(sub))),
toupper(reverseComplement(get_medium1(sub))),
toupper(reverseComplement(get_weak1(sub))))
}
# Left flanking
for (distance in start_distance:end_distance) {
# print(substr(string, center -distance, center))
sub <- substr(string, center -distance, center)
substrings_left <- c(substrings_left,
get_strong1(sub),
get_strong2(sub),
get_medium1(sub),
get_weak1(sub))
}
}
# Return the extracted substrings
return(list(left = substrings_left[!substrings_left %in% "N"],
right = substrings_right[!substrings_right %in% "N"]))
}
grouped_sequences <- snp_wrangled %>%
group_by(snpID) %>%
summarize(sequence_list = list(sequence)) %>%
mutate(substrings = map(sequence_list, ~extract_substrings(.x,
center,
start_distance,
end_distance))) %>%
unnest(substrings)
extract_substrings <- function(string, center, start_distance , end_distance) {
# Empty lists to store substrings
substrings_left <- list()
substrings_right <- list()
for (item in string) {
center = center + 1
start_distance = start_distance + 1
end_distance = end_distance + 1
print(paste("item ", item))
# right flanking
for (distance in start_distance:end_distance) {
sub <- substr(string, center, center + distance)
print(sub)
print("omething to stop")
print(toupper(reverseComplement(get_strong1(sub))))
print(toupper(reverseComplement(get_strong2(sub))))
substrings_right <- c(substrings_right,
toupper(reverseComplement(get_strong1(sub))),
toupper(reverseComplement(get_strong2(sub))),
toupper(reverseComplement(get_medium1(sub))),
toupper(reverseComplement(get_weak1(sub))))
}
# Left flanking
for (distance in start_distance:end_distance) {
# print(substr(string, center -distance, center))
sub <- substr(string, center -distance, center)
substrings_left <- c(substrings_left,
get_strong1(sub),
get_strong2(sub),
get_medium1(sub),
get_weak1(sub))
}
}
# Return the extracted substrings
return(list(left = substrings_left[!substrings_left %in% "N"],
right = substrings_right[!substrings_right %in% "N"]))
}
grouped_sequences <- snp_wrangled %>%
group_by(snpID) %>%
summarize(sequence_list = list(sequence)) %>%
mutate(substrings = map(sequence_list, ~extract_substrings(.x,
center,
start_distance,
end_distance))) %>%
unnest(substrings)
extract_substrings <- function(string, center, start_distance , end_distance) {
# Empty lists to store substrings
substrings_left <- list()
substrings_right <- list()
for (item in string) {
center = center + 1
start_distance = start_distance + 1
end_distance = end_distance + 1
# right flanking
for (distance in start_distance:end_distance) {
sub <- substr(item, center, center + distance)
substrings_right <- c(substrings_right,
toupper(reverseComplement(get_strong1(sub))),
toupper(reverseComplement(get_strong2(sub))),
toupper(reverseComplement(get_medium1(sub))),
toupper(reverseComplement(get_weak1(sub))))
}
# Left flanking
for (distance in start_distance:end_distance) {
# print(substr(string, center -distance, center))
sub <- substr(item, center -distance, center)
substrings_left <- c(substrings_left,
get_strong1(sub),
get_strong2(sub),
get_medium1(sub),
get_weak1(sub))
}
}
# Return the extracted substrings
return(list(left = substrings_left[!substrings_left %in% "N"],
right = substrings_right[!substrings_right %in% "N"]))
}
grouped_sequences <- snp_wrangled %>%
group_by(snpID) %>%
summarize(sequence_list = list(sequence)) %>%
mutate(substrings = map(sequence_list, ~extract_substrings(.x,
center,
start_distance,
end_distance))) %>%
unnest(substrings)
grouped_sequences_far <- snp_wrangled %>%
group_by(snpID) %>%
slice(1:1)%>%
ungroup() %>%
mutate(substrings = map(sequence, ~extract_substrings_far(.x,
center,
start_distance,
end_distance,
far))) %>%
unnest(substrings)
extract_substrings_far <- function(string, center, start_distance , end_distance, far, shift) {
# Empty lists to store substrings
substrings_left <- list()
substrings_right <- list()
for (i in far:far + shift){
# to Right
for (distance in start_distance:end_distance) {
# print(substr(string, far + center, far + center + distance))
sub = substr(string, i + center, i + center + distance)
substrings_right <- c(substrings_right, reverseComplement(sub))
}
# Left flanking
for (distance in start_distance:end_distance) {
# print(substr(string, center - distance - far, center - far))
substrings_left <- c(substrings_left,
substr(string,
center - distance - i,
center - i))}
}
# Return the extracted substrings
return(list(left = substrings_left, right = substrings_right))
}
unliii <- extract_substrings_far(snp_wrangled[[2]][[1]],
center,
start_distance,
end_distance,
100, 5)
unlist(unliii $left)
unliii <- extract_substrings_far(snp_wrangled[[2]][[1]],
center,
start_distance,
end_distance,
100, 5)
unlist(unliii $left)
unliii <- extract_substrings_far(snp_wrangled[[2]][[1]],
center,
start_distance,
end_distance,
100, 10)
unlist(unliii $left)
unlist(unliii$left)
far
shift
shift = 5
shift
far:far + shift
far : far + shift
far + shift
1:far + shift
far-1+1:far + shift
shift
1:5
1:far
far+1:far
seq(far, far + shift)
extract_substrings_far <- function(string, center, start_distance , end_distance, far, shift) {
# Empty lists to store substrings
substrings_left <- list()
substrings_right <- list()
for (i in seq(far, far + shift)){
# to Right
for (distance in start_distance:end_distance) {
# print(substr(string, far + center, far + center + distance))
sub = substr(string, i + center, i + center + distance)
substrings_right <- c(substrings_right, reverseComplement(sub))
}
# Left flanking
for (distance in start_distance:end_distance) {
# print(substr(string, center - distance - far, center - far))
substrings_left <- c(substrings_left,
substr(string,
center - distance - i,
center - i))}
}
# Return the extracted substrings
return(list(left = substrings_left, right = substrings_right))
}
unliii <- extract_substrings_far(snp_wrangled[[2]][[1]],
center,
start_distance,
end_distance,
100, 10)
unlist(unliii$left)
unliii <- extract_substrings_far(snp_wrangled[[2]][[1]],
center,
start_distance,
end_distance,
200, 200)
unlist(unliii$left)
grouped_sequences <- snp_wrangled %>%
group_by(snpID) %>%
summarize(sequence_list = list(sequence)) %>%
mutate(substrings = map(sequence_list, ~extract_substrings(.x,
center,
start_distance,
end_distance))) %>%
unnest(substrings)
grouped_sequences_far <- snp_wrangled %>%
group_by(snpID) %>%
slice(1:1)%>%
ungroup() %>%
mutate(substrings = map(sequence, ~extract_substrings_far(.x,
center,
start_distance,
end_distance,
far))) %>%
unnest(substrings)
grouped_sequences_far <- snp_wrangled %>%
group_by(snpID) %>%
slice(1:1)%>%
ungroup() %>%
mutate(substrings = map(sequence, ~extract_substrings_far(.x,
center,
start_distance,
end_distance,
far, shift))) %>%
unnest(substrings)
View(grouped_sequences_far)
extract_substrings_far <- function(string, center, start_distance , end_distance, far, shift) {
# Empty lists to store substrings
substrings_left <- list()
substrings_right <- list()
for (i in seq(far, far + shift)){
# to Right
for (distance in start_distance:end_distance) {
# print(substr(string, far + center, far + center + distance))
sub = substr(string, i + center, i + center + distance)
substrings_right <- c(substrings_right, toupper(reverseComplement(sub)))
}
# Left flanking
for (distance in start_distance:end_distance) {
# print(substr(string, center - distance - far, center - far))
substrings_left <- c(substrings_left,
substr(string,
center - distance - i,
center - i))}
}
# Return the extracted substrings
return(list(left = substrings_left, right = substrings_right))
}
grouped_sequences <- snp_wrangled %>%
group_by(snpID) %>%
summarize(sequence_list = list(sequence)) %>%
mutate(substrings = map(sequence_list, ~extract_substrings(.x,
center,
start_distance,
end_distance))) %>%
unnest(substrings)
grouped_sequences_far <- snp_wrangled %>%
group_by(snpID) %>%
slice(1:1)%>%
ungroup() %>%
mutate(substrings = map(sequence, ~extract_substrings_far(.x,
center,
start_distance,
end_distance,
far, shift))) %>%
unnest(substrings)
View(grouped_sequences)
grouped_sequences_far$substrings
All-primer <- rbind(grouped_sequences, grouped_sequences_far$substrings)
View(grouped_sequences)
All-primer <- cbind(grouped_sequences, grouped_sequences_far$substrings)
All_primer <- cbind(grouped_sequences, grouped_sequences_far$substrings)
View(All_primer)
View(grouped_sequences)
grouped_sequences[[3]]
unlist(grouped_sequences[[3]])
unlist(grouped_sequences[[3]])
grouped_sequences$faraway <- grouped_sequences_far$substrings
